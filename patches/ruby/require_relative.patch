diff --git a/internal/vm.h b/internal/vm.h
index cf245c6579..303ff92344 100644
--- a/internal/vm.h
+++ b/internal/vm.h
@@ -64,6 +64,7 @@ MJIT_SYMBOL_EXPORT_END
 
 /* vm_eval.c */
 VALUE rb_current_realfilepath(void);
+VALUE rb_custom_current_realfilepath(void);
 VALUE rb_check_block_call(VALUE, ID, int, const VALUE *, rb_block_call_func_t, VALUE);
 typedef void rb_check_funcall_hook(int, VALUE, ID, int, const VALUE *, VALUE);
 VALUE rb_check_funcall_with_hook(VALUE recv, ID mid, int argc, const VALUE *argv,
diff --git a/iseq.c b/iseq.c
index a6ba5c12bb..cafcde0d86 100644
--- a/iseq.c
+++ b/iseq.c
@@ -1641,7 +1641,7 @@ iseqw_path(VALUE self)
 static VALUE
 iseqw_absolute_path(VALUE self)
 {
-    return rb_iseq_realpath(iseqw_check(self));
+    return rb_iseq_path(iseqw_check(self));
 }
 
 /*  Returns the label of this instruction sequence.
diff --git a/load.c b/load.c
index f3d39c2c08..b5c5a0411e 100644
--- a/load.c
+++ b/load.c
@@ -950,7 +950,7 @@ rb_f_require(VALUE obj, VALUE fname)
 VALUE
 rb_f_require_relative(VALUE obj, VALUE fname)
 {
-    VALUE base = rb_current_realfilepath();
+    VALUE base = rb_custom_current_realfilepath();
     if (NIL_P(base)) {
         rb_loaderror("cannot infer basepath");
     }
diff --git a/vm_backtrace.c b/vm_backtrace.c
index e50611c7bb..d38be27598 100644
--- a/vm_backtrace.c
+++ b/vm_backtrace.c
@@ -359,10 +359,10 @@ location_realpath(rb_backtrace_location_t *loc)
 {
     switch (loc->type) {
       case LOCATION_TYPE_ISEQ:
-        return rb_iseq_realpath(loc->iseq);
+        return rb_iseq_path(loc->iseq);
       case LOCATION_TYPE_CFUNC:
         if (loc->iseq) {
-            return rb_iseq_realpath(loc->iseq);
+            return rb_iseq_path(loc->iseq);
         }
         return Qnil;
       default:
@@ -1696,7 +1696,7 @@ rb_profile_frame_absolute_path(VALUE frame)
         return cfunc_str;
     }
     const rb_iseq_t *iseq = frame2iseq(frame);
-    return iseq ? rb_iseq_realpath(iseq) : Qnil;
+    return iseq ? rb_iseq_path(iseq) : Qnil;
 }
 
 VALUE
diff --git a/vm_eval.c b/vm_eval.c
index 2e1a9b80a6..5258ff26f7 100644
--- a/vm_eval.c
+++ b/vm_eval.c
@@ -2555,7 +2555,7 @@ rb_current_realfilepath(void)
     rb_control_frame_t *cfp = ec->cfp;
     cfp = vm_get_ruby_level_caller_cfp(ec, RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp));
     if (cfp != NULL) {
-        VALUE path = rb_iseq_realpath(cfp->iseq);
+        VALUE path = rb_iseq_path(cfp->iseq);
         if (RTEST(path)) return path;
         // eval context
         path = rb_iseq_path(cfp->iseq);
@@ -2569,6 +2569,25 @@ rb_current_realfilepath(void)
     return Qnil;
 }
 
+VALUE
+rb_custom_current_realfilepath(void)
+{
+    const rb_execution_context_t *ec = GET_EC();
+    rb_control_frame_t *cfp = ec->cfp;
+    cfp = vm_get_ruby_level_caller_cfp(ec, RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp));
+    if (cfp != NULL) {
+        VALUE path = rb_iseq_path(cfp->iseq);
+        if (RTEST(path)) return path;
+        if (path == eval_default_path) {
+            return Qnil;
+        }
+        else {
+            return path;
+        }
+    }
+    return Qnil;
+}
+
 void
 Init_vm_eval(void)
 {
